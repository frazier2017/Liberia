clusts <- list()
i <- 1
while (i <= nrow (df)){
clust <- nodeclust (df, df[1,], r)
df <- subset(df, !(df[,3] %in% clust[,3]))
clusts <- c(clusts, list(clust))
i <- 1
}
return (clusts)
}
clusts3<-ncluster(df,.1)
identical(clusts4,clusts3)
nodeclust <- function (df, current_point, r){
circle <- shape.circle (c (current_point[,1], current_point[,2]), r = r)
last_point <- current_point
point_set <- df[which (point.in.polygon (df[,1], df[,2], circle$x, circle$y) > 0),]
if (nrow (point_set) == 0){
return (current_point)
}else{
df <- subset(df, !(df[,3] %in% point_set[,3]))
cluster <- unique(bind_rows(lapply (1:nrow (point_set), function (i) {nodeclust (df, point_set[i,], r)})))
return (cluster)
}
}
ncluster <- function(df, r){
clusts <- list()
i <- 1
while (i <= nrow (df)){
clust <- nodeclust (df, df[1,], r)
df <- subset(df, !(df[,3] %in% clust[,3]))
clusts <- c(clusts, list(clust))
i <- 1
}
return (clusts)
}
clusts3<-ncluster(df,.1)
plot(df$x,df$y)
points(clusts4,pcl=2)
points(clusts4[[2]],pcl=2)
points(clusts4[[2]],pch=2)
points(clusts3[[2]],col="blue")
nodeclust <- function (df, current_point, r){
circle <- shape.circle (c (current_point[,1], current_point[,2]), r = r)
last_point <- current_point
point_set <- df[which (point.in.polygon (df[,1], df[,2], circle$x, circle$y) > 0),]
if (nrow (point_set) == 0){
return (current_point)
}else{
df <- subset(df, !(df[,3] %in% point_set[,3]))
branch <- unique(bind_rows(lapply (1:nrow (point_set), function (i) {nodeclust (df, point_set[i,], r)})))
cluster<-rbind (last_point, branch)
return (cluster)
}
}
clusts2<-ncluster(df,.1)
nodeclust <- function (df, current_point, r){
circle <- shape.circle (c (current_point[,1], current_point[,2]), r = r)
last_point <- current_point
point_set <- df[which (point.in.polygon (df[,1], df[,2], circle$x, circle$y) > 0),]
if (nrow (point_set) == 0){
return (current_point)
}else{
df <- subset(df, !(df[,3] %in% point_set[,3]))
branch <- unique(bind_rows(lapply (1:nrow (point_set), function (i) {nodeclust (df, point_set[i,], r)})))
#cluster<-rbind (last_point, branch)
return (branch)
}
}
clusts2<-ncluster(df,.1)
nodeclust <- function (df, current_point, r){
circle <- shape.circle (c (current_point[,1], current_point[,2]), r = r)
last_point <- current_point
point_set <- df[which (point.in.polygon (df[,1], df[,2], circle$x, circle$y) > 0),]
if (nrow (point_set) == 0){
return (current_point)
}else{
df <- subset(df, !(df[,3] %in% point_set[,3]))
branch <- unique(bind_rows(lapply (1:nrow (point_set), function (i) {nodeclust (df, point_set[i,], r)})))
#cluster<-rbind (last_point, branch)
return (last_point)
}
}
clusts2<-ncluster(df,.1)
nodeclust <- function (df, current_point, r){
circle <- shape.circle (c (current_point[,1], current_point[,2]), r = r)
last_point <- current_point
point_set <- df[which (point.in.polygon (df[,1], df[,2], circle$x, circle$y) > 0),]
if (nrow (point_set) == 0){
return (current_point)
}else{
df <- subset(df, !(df[,3] %in% point_set[,3]))
branch <- unique(bind_rows(lapply (1:nrow (point_set), function (i) {nodeclust (df, point_set[i,], r)})))
#cluster<-rbind (last_point, branch)
return (branch)
}
}
clusts2<-ncluster(df,.1)
nodeclust <- function (df, current_point, r){
circle <- shape.circle (c (current_point[,1], current_point[,2]), r = r)
last_point <- current_point
df <- df[which (df[,3] != current_point[,3]),]
point_set <- df[which (point.in.polygon (df[,1], df[,2], circle$x, circle$y) > 0),]
if (nrow (point_set) == 0){
return (current_point)
}else{
df <- subset(df, !(df[,3] %in% point_set[,3]))
branch <- unique(bind_rows(lapply (1:nrow (point_set), function (i) {nodeclust (df, point_set[i,], r)})))
cluster<-rbind (last_point, branch)
return (branch)
}
}
clusts2<-ncluster(df,.1)
nodeclust <- function (df, current_point, r){
circle <- shape.circle (c (current_point[,1], current_point[,2]), r = r)
last_point <- current_point
df <- df[which (df[,3] != current_point[,3]),]
point_set <- df[which (point.in.polygon (df[,1], df[,2], circle$x, circle$y) > 0),]
if (nrow (point_set) == 0){
return (current_point)
}else{
df <- subset(df, !(df[,3] %in% point_set[,3]))
branch <- unique(bind_rows(lapply (1:nrow (point_set), function (i) {nodeclust (df, point_set[i,], r)})))
cluster<-rbind (last_point, branch)
return (cluster)
}
}
clusts2<-ncluster(df,.1)
nodeclust <- function (df, current_point, r){
circle <- shape.circle (c (current_point[,1], current_point[,2]), r = r)
#last_point <- current_point
df <- df[which (df[,3] != current_point[,3]),]
point_set <- df[which (point.in.polygon (df[,1], df[,2], circle$x, circle$y) > 0),]
if (nrow (point_set) == 0){
return (current_point)
}else{
df <- subset(df, !(df[,3] %in% point_set[,3]))
branch <- unique(bind_rows(lapply (1:nrow (point_set), function (i) {nodeclust (df, point_set[i,], r)})))
#cluster<-rbind (last_point, branch)
return (branch)
}
}
clusts2<-ncluster(df,.1)
nodeclust <- function (df, current_point, r){
circle <- shape.circle (c (current_point[,1], current_point[,2]), r = r)
#last_point <- current_point
#df <- df[which (df[,3] != current_point[,3]),]
point_set <- df[which (point.in.polygon (df[,1], df[,2], circle$x, circle$y) > 0),]
if (nrow (point_set) == 0){
return (current_point)
}else{
df <- subset(df, !(df[,3] %in% point_set[,3]))
branch <- unique(bind_rows(lapply (1:nrow (point_set), function (i) {nodeclust (df, point_set[i,], r)})))
#cluster<-rbind (last_point, branch)
return (branch)
}
}
test<-nodeclust(df,df[2,],.1)
View(test)
nodeclust <- function (df, current_point, r){
circle <- shape.circle (c (current_point[,1], current_point[,2]), r = r)
#last_point <- current_point
#df <- df[which (df[,3] != current_point[,3]),]
point_set <- df[which (point.in.polygon (df[,1], df[,2], circle$x, circle$y) > 0),]
}
test<-nodeclust(df,df[2,],.1)
View(test)
lines(shape.circle(c(df[2,1],df[2,2]),.1))
nodeclust <- function (df, current_point, r){
circle <- shape.circle (c (current_point[,1], current_point[,2]), r = r)
last_point <- current_point
df <- df[which (df[,3] != current_point[,3]),]
point_set <- df[which (point.in.polygon (df[,1], df[,2], circle$x, circle$y) > 0),]
if (nrow (point_set) == 0){
return (current_point)
}else{
df <- subset(df, !(df[,3] %in% point_set[,3]))
branch <- bind_rows(lapply (1:nrow (point_set), function (i) {nodeclust (df, point_set[i,], r)}))
cluster<-rbind (last_point, branch)
return (branch)
}
}
ncluster <- function(df, r){
clusts <- list()
i <- 1
while (i <= nrow (df)){
clust <- nodeclust (df, df[1,], r)
df <- subset(df, !(df[,3] %in% clust[,3]))
clusts <- c(clusts, list(clust))
i <- 1
}
return (clusts)
}
clusts2<-ncluster(df,.1)
identical(clusts4,clusts2)
nodeclust <- function (df, current_point, r){
circle <- shape.circle (c (current_point[,1], current_point[,2]), r = r)
last_point <- current_point
df <- df[which (df[,3] != current_point[,3]),]
point_set <- df[which (point.in.polygon (df[,1], df[,2], circle$x, circle$y) > 0),]
if (nrow (point_set) == 0){
return (current_point)
}else{
df <- subset(df, !(df[,3] %in% point_set[,3]))
branch <- bind_rows(lapply (1:nrow (point_set), function (i) {nodeclust (df, point_set[i,], r)}))
cluster<-rbind (last_point, branch)
return (cluster)
}
}
ncluster <- function(df, r){
clusts <- list()
i <- 1
while (i <= nrow (df)){
clust <- nodeclust (df, df[1,], r)
df <- subset(df, !(df[,3] %in% clust[,3]))
clusts <- c(clusts, list(clust))
i <- 1
}
return (clusts)
}
clusts2<-ncluster(df,.1)
identical(clusts4,clusts2)
nodeclust <- function (df, current_point, r){
circle <- shape.circle (c (current_point[,1], current_point[,2]), r = r)
last_point <- current_point
df <- df[which (df[,3] != current_point[,3]),]
point_set <- df[which (point.in.polygon (df[,1], df[,2], circle$x, circle$y) > 0),]
if (nrow (point_set) == 0){
return (current_point)
}else{
df <- subset(df, !(df[,3] %in% point_set[,3]))
branch <- bind_rows(lapply (1:nrow (point_set), function (i) {nodeclust (df, point_set[i,], r)}))
cluster<-rbind (last_point, branch)
return (cluster)
}
}
ncluster <- function(df, r){
clusts <- list()
i <- 1
while (i <= nrow (df)){
clust <- nodeclust (df, df[1,], r)
df <- subset(df, !(df[,3] %in% clust[,3]))
clusts <- c(clusts, list(clust))
i <- 1
}
return (clusts)
}
clusts2<-ncluster(df,.1)
nodeclust <- function (df, current_point, r){
circle <- shape.circle (c (current_point[,1], current_point[,2]), r = r)
last_point <- current_point
df <- df[which (df[,3] != current_point[,3]),]
point_set <- df[which (point.in.polygon (df[,1], df[,2], circle$x, circle$y) > 0),]
if (nrow (point_set) == 0){
return (current_point)
}else{
df <- subset(df, !(df[,3] %in% point_set[,3]))
branch <- unique(bind_rows(lapply (1:nrow (point_set), function (i) {nodeclust (df, point_set[i,], r)})))
cluster<-rbind (last_point, branch)
return (cluster)
}
}
ncluster <- function(df, r){
clusts <- list()
i <- 1
while (i <= nrow (df)){
clust <- nodeclust (df, df[1,], r)
df <- subset(df, !(df[,3] %in% clust[,3]))
clusts <- c(clusts, list(clust))
i <- 1
}
return (clusts)
}
clusts2<-ncluster(df,.1)
identical(clusts4,clusts2)
win<-owin(c(0,1),c(0,1))
f<-function(x,y){x+y}
set.seed(5)
box<-rpoint(100,f=f,win=win)
quartz()
plot(box)
df<-as.data.frame(box)
df$id<-seq(1,nrow(df))
plot(df$x,df$y)
plot(df$x,df$y)
quartz()
plot(df$x,df$y)
plot(df$x,df$y)
quartz()
plot(df$x,df$y)
nodeclust <- function (df, current_point, r){
circle <- shape.circle (c (current_point[,1], current_point[,2]), r = r)
last_point <- current_point
df <- df[which (df[,3] != current_point[,3]),]
point_set <- df[which (point.in.polygon (df[,1], df[,2], circle$x, circle$y) > 0),]
if (nrow (point_set) == 0){
return (current_point)
}else{
df <- subset(df, !(df[,3] %in% point_set[,3]))
branch <- unique(bind_rows(lapply (1:nrow (point_set), function (i) {nodeclust (df, point_set[i,], r)})))
cluster<-rbind (last_point, branch)
return (cluster)
}
}
ncluster <- function(df, r){
clusts <- list()
i <- 1
while (i <= nrow (df)){
clust <- nodeclust (df, df[1,], r)
df <- subset(df, !(df[,3] %in% clust[,3]))
clusts <- c(clusts, list(clust))
i <- 1
}
return (clusts)
}
clusts4 <- ncluster(df,.1)
test<-lapply(1:3,function(i) shape.circle(clusts4[[1]][i,]))
test<-lapply(1:3,function(i) shape.circle(c(clusts4[[1]][i,1],clusts4[[1]][i,2]),.1))
lines(unlit(test),col="blue")
lines(unlist(test),col="blue")
plot(df$x,df$y)
lines(test,col="blue")
test<-bind_rows(test)
lines(test,col="blue")
test2<-unlist(test)
test<-lapply(1:length(clusts4),function(i) {lapply(1:nrow(clusts4[[i]]),function(j) shape.circle(c(clusts4[[1]][j,1],clusts4[[1]][j,2]),.1))})
test<-lapply(1:length(test), function(i) bind_rows(test[[i]]))
for (i in 1:length(test)){
line(test[[i]],col = i)
}
for (i in 1:length(test)){
line(test[[i]],col = rainbow(17))
}
for (i in 1:length(test)){
line(test[[i]],cols = rainbow(17))
}
cols<-rainbow(17)
for (i in 1:length(test)){
line(test[[i]],col = cols)
}
for (i in 1:length(test)){
line(test[[i]],col = cols[i])
}
for (i in 1:length(test)){
lines(test[[i]],col = cols[i])
}
lines(test[[1]], col = cols[1])
lines(test[[2]], col = cols[2])
test[[2]]
test<-lapply(1:length(clusts4),function(i) {lapply(1:nrow(clusts4[[i]]),function(j) shape.circle(c(clusts4[[1]][j,1],clusts4[[1]][j,2]),.1))})
clusts4 <- ncluster(df,.1)
test<-lapply(1:length(clusts4),function(i) {lapply(1:nrow(clusts4[[i]]),function(j) shape.circle(c(clusts4[[1]][j,1],clusts4[[1]][j,2]),.1))})
for (i in 1:length(test)){
for (j in 1:length(test[[i]])){
lines(test[[i]][[j]],col = cols [i])
}
}
test<-lapply(1:length(test), function(i) bind_rows(test[[i]]))
plot(df$x,df$y)
lines(test[[1]], col = cols [1])
lines(test[[2]], col = cols [2])
lines(test[[3]], col = cols [3])
lines(test[[4]], col = cols [4])
lines(test[[5]], col = cols [5])
lines(test[[6]], col = cols [6])
lines(test[[7]], col = cols [7])
lines(test[[8]], col = cols [8])
lines(test[[9]], col = cols [9])
lines(test[[10]], col = cols [10])
lines(test[[11]], col = cols [11])
lines(test[[12]], col = cols [12])
lines(test[[13]], col = cols [13])
lines(test[[14]], col = cols [14])
lines(test[[15]], col = cols [15])
lines(test[[16]], col = cols [16])
lines(test[[17]], col = cols [17])
clusts4 <- ncluster(df,.1)
test<-lapply(1:length(clusts4),function(i) {lapply(1:nrow(clusts4[[i]]),function(j) shape.circle(c(clusts4[[i]][j,1],clusts4[[i]][j,2]),.1))})
for (i in 1:length(test)){
for (j in 1:length(test[[i]])){
lines(test[[i]][[j]],col = cols [i])
}
}
color = grDevices::colors()[grep('gr(a|e)y', grDevices::colors(), invert = T)]
pie(rep(1,17), col=sample(col_vector, 17))
pie(rep(1,17), col=sample(color, 17))
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
pie(rep(1,17), col=sample(col_vector, 17))
for (i in 1:length(test)){
for (j in 1:length(test[[i]])){
lines(test[[i]][[j]],col = sample(col_vector,17))
}
}
plot(df$x,df$y)
for (i in 1:length(test)){
for (j in 1:length(test[[i]])){
lines(test[[i]][[j]],col = sample(col_vector,17))
}
}
cols<-sample(col_vector, 17))
cols<-sample(col_vector, 17)
plot(df$x,df$y)
for (i in 1:length(test)){
for (j in 1:length(test[[i]])){
lines(test[[i]][[j]],col = cols[i])
}
}
win<-owin(c(0,10),c(0,10))
f<-function(x,y){x+y}
set.seed(5)
box<-rpoint(1000,f=f,win=win)
quartz()
plot(box)
df<-as.data.frame(box)
df$id<-seq(1,nrow(df))
plot(df$x,df$y)
clusts <- ncluster(df,.1)
bounds <- lapply (1:length(clusts), function(i) {lapply (1:nrow (clusts[[i]]), function(j) {shape.circle (c (clusts[[i]][j,1], clusts[[i]][j,2]), .1)})})
color = grDevices::colors()[grep('gr(a|e)y', grDevices::colors(), invert = T)]
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
pie(rep(1,17), col=sample(col_vector, 17))
cols<-sample(col_vector, 17)
col_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
pie(rep(1,17), col=sample(col_vector, 17))
plot(df$x,df$y)
for (i in 1:length(bounds)){
for (j in 1:length(bounds[[i]])){
lines(bounds[[i]][[j]],col = cols[i])
}
}
pie(rep(1,17), col=sample(col_vector, 200))
pie(rep(1,200), col=sample(col_vector, 200))
color = grDevices::colors()[grep('gr(a|e)y', grDevices::colors(), invert = T)]
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
pie(rep(1,200), col=sample(col_vector, 200))
pie(rep(1,250), col=sample(col_vector, 200))
plot(df$x,df$y)
plot(df$x,df$y)
clusts <- ncluster(df,1)
clusts <- ncluster(df,.5)
Q
test<-wp_lbr_10[which(wp_lbr_10==0),]
test<-wp_lbr_14[which(wp_lbr_14==0),]
test<-wp_lbr_14
test[test!=0]<-NA
plot(test)
plot(wp_bain_plus_14_utm_ppp)
plot(wp_bain_plus_14_utm_ppp,cex=.03)
bain_df<-as.data.frame(wp_bain_plus_14_utm_ppp)
plot(bain_df)
plot(bain_df,cex=.03)
bain<-clust(df,10)
bain<-ncluster(df,10)
bain_df$id<-seq(1,nrow(df))
bain_df$id<-seq(1,nrow(bain_df))
bain_df<-as.data.frame(wp_bain_plus_14_utm_ppp)
bain_df$id<-seq(1,nrow(bain_df))
bain_clust<-ncluster(bain_df,10)
plot(bain_utm_ppp)
plot(bain_utm_ppp,cex=.03)
bain_df<-as.data.frame(bain_utm_ppp)
plot(bain_df,cex=.03)
bain_clust<-ncluster(bain_df,20)
bain_df$id<-seq(1,nrow(bain_df))
bain_clust<-ncluster(bain_df,20)
win <- as(bain_utm,"owin")
bain_utm_ppp<-rpoint(floor((cellStats(wp_bain_14_utm, 'sum')))/10, f = wp_bain_14_utm_im, win=win)
plot(bain_utm_ppp,cex=.03)
bain_df<-as.data.frame(bain_utm_ppp)
bain_df$id<-seq(1,nrow(bain_df))
plot(bain_df,cex=.03)
plot(bain_df$x,bain_df$y,cex=.03)
bain_clust<-ncluster(bain_df,150)
bain_clust<-ncluster(bain_df,20)
len<-lapply(1:length(bain_clust), function(i) nrow(bain_clust[[i]]))
len
max(len)
sort(len)
len<-sapply(1:length(bain_clust), function(i) nrow(bain_clust[[i]]))
max(len)
bain_clust<-ncluster(bain_df,50)
len<-sapply(1:length(bain_clust), function(i) nrow(bain_clust[[i]]))
max(len)
bain_clust<-ncluster(bain_df,80)
bain_clust<-ncluster(bain_df,60)
len<-sapply(1:length(bain_clust), function(i) nrow(bain_clust[[i]]))
max(len)
bain_clust<-ncluster(bain_df,70)
len<-sapply(1:length(bain_clust), function(i) nrow(bain_clust[[i]]))
max(len)
total <- 20
# create progress bar
pb <- txtProgressBar(min = 0, max = total, style = 3)
for(i in 1:total){
Sys.sleep(0.1)
# update progress bar
setTxtProgressBar(pb, i)
}
close(pb)
total <- 20
# create progress bar
pb <- txtProgressBar(min = 0, max = total, style = 3)
for(i in 1:total){
Sys.sleep(0.1)
# update progress bar
setTxtProgressBar(pb, i)
}
close(pb)
install.packages("progress")
library(progress)
