x<-cbind(0.5+r*cos(theta),0.5+r*sin(theta))
alpha <- 0.15
alphahull <- ahull(x, alpha = alpha)
plot(alphahull, col = c(6, rep(1, 5)), xlab = "x-coordinate", ylab = "y-coordinate", main = expression(paste(alpha, "-hull")))
points(M)
bain_gclust<-graphclust(bain_df, r=200)
bain_gclust2<-bain_df[which(bain_df$id %in% bain_gclust[[2]]),]
M<-as.matrix(bain_gclust2)
points(M)
shell<-convex_hull(M[,1:2])
shell_df <- df[which(df$id %in% shell),]
points(shell$rescoords,col="purple")
polygon(shell$rescoords)
ahull_shell<-ahull(M,alpha=10)
plot(ahull_shell, do.shape = TRUE, col = c(6, rep(1, 5)), xlab = "x-coordinate", ylab = "y-coordinate")
ahull_shell<-ahull(M,alpha=.00001)
plot(ahull_shell, do.shape = TRUE, col = c(6, rep(1, 5)), xlab = "x-coordinate", ylab = "y-coordinate")
ahull_shell<-ahull(M,alpha=1000)
plot(ahull_shell, do.shape = TRUE, col = c(6, rep(1, 5)), xlab = "x-coordinate", ylab = "y-coordinate")
ahull_shell<-ahull(M,alpha=100)
plot(ahull_shell, do.shape = TRUE, col = c(6, rep(1, 5)), xlab = "x-coordinate", ylab = "y-coordinate")
ahull_shell<-ahull(M,alpha=200)
plot(ahull_shell, col = c(6, rep(1, 5)), xlab = "x-coordinate", ylab = "y-coordinate")
ahull_shell<-ahull(M,alpha=201)
plot(ahull_shell, col = c(6, rep(1, 5)), xlab = "x-coordinate", ylab = "y-coordinate")
ahull_shell<-ahull(M,alpha=250)
plot(ahull_shell, col = c(6, rep(1, 5)), xlab = "x-coordinate", ylab = "y-coordinate")
ahull_shell<-ahull(M,alpha=300)
plot(ahull_shell, col = c(6, rep(1, 5)), xlab = "x-coordinate", ylab = "y-coordinate")
ahull_shell<-ahull(M,alpha=400)
plot(ahull_shell, col = c(6, rep(1, 5)), xlab = "x-coordinate", ylab = "y-coordinate")
bain_utm_ppp<-rpoint(floor((cellStats(wp_bain_14_utm, 'sum'))), f = wp_bain_14_utm_im, win=win)
bain_df<-as.data.frame(bain_utm_ppp)
bain_df$id<-seq(1,nrow(bain_df))
bain_gclust<-graphclust(bain_df, r=20)
graphclust <- function (df, r){
adj_m <- find_neighbors (df, r)
graph <- graph_from_adjacency_matrix(adj_m, mode = "undirected")
edges <- get.edgelist(graph)
links <- data.frame (id = unique (unlist (list (edges[,1],edges[,2]))), group = clusters (graph)$membership)
links <- split(links$id,links$group)
#graph2 <- graph_from_adjacency_matrix(adj_m, mode = "undirected", diag = FALSE)
#l <- as.matrix(df[,c("x","y")])
#plot(graph2, vertex.size = 1, vertex.color = "black", vertex.label= NA, edge.arrow.size = .1,
#     axes = TRUE, layout = l, xlim = c(floor (min (l[,1] - 1)), floor (max (l[,1] + 1))), ylim = c(floor (min (l[,2] - 1)), floor (max (l[,2] + 1))), rescale = FALSE,
#     mark.groups = links, mark.shape = 1)
return (links)
}
adj_m<-find_neighbors(bain_df,20)
graph <- graph_from_adjacency_matrix(adj_m, mode = "undirected")
win<-owin(c(0,10),c(0,10))
f<-function(x,y){x+y}
set.seed(5)
box<-rpoint(100,f=f,win=win)
quartz()
plot(box)
df<-as.data.frame(box)
df$id<-seq(1,nrow(df))
plot(df$x,df$y,cex=.1)
circles <- lapply (1:nrow (df), function(i) {shape.circle (c (df$x[i], df$y[i]), r = r)})
for (i in 1:100){
lines(circle[[i]],col="red")
}
for (i in 1:100){
lines(circles[[i]],col="red")
}
plot(df$x,df$y,cex=.1)
for (i in 1:100){
curves(circles[[i]],col="red")
}
for (i in 1:100){
curve(circles[[i]],col="red")
}
circles <- lapply (1:nrow (df), function(i) {shape.circle (c (df$x[i], df$y[i]), r = .1)})
plot(df$x,df$y,cex=.1)
for (i in 1:100){
curve(circles[[i]],col="red")
}
lines(circles[[i]],col="red")
for (i in 1:100){
lines(circles[[i]],col="red")
}
edges <- get.edgelist(graph)
links <- data.frame (id = unique (unlist (list (edges[,1],edges[,2]))), group = clusters (graph)$membership)
links <- split(links$id,links$group)
len<-sapply(1:length(links), function(i) length(links[[i]]))
max(len)
graphclust <- function (df, r, plot = FALSE){
adj_m <- find_neighbors (df, r)
graph <- graph_from_adjacency_matrix(adj_m, mode = "undirected")
edges <- get.edgelist(graph)
links <- data.frame (id = unique (unlist (list (edges[,1],edges[,2]))), group = clusters (graph)$membership)
links <- split(links$id,links$group)
if (plot == TRUE){
graph2 <- graph_from_adjacency_matrix(adj_m, mode = "undirected", diag = FALSE)
l <- as.matrix(df[,1:2])
plot(graph2, vertex.size = 1, vertex.color = "black", vertex.label= NA, edge.arrow.size = .1,
axes = TRUE, layout = l, xlim = c(floor (min (l[,1] - 1)), floor (max (l[,1] + 1))), ylim = c(floor (min (l[,2] - 1)), floor (max (l[,2] + 1))), rescale = FALSE,
mark.groups = links, mark.shape = 1)
}
return (links)
}
graphclust <- function (df, r, plot = FALSE){
adj_m <- find_neighbors (df, r)
graph <- graph_from_adjacency_matrix(adj_m, mode = "undirected")
edges <- get.edgelist(graph)
links <- data.frame (id = unique (unlist (list (edges[,1],edges[,2]))), group = clusters (graph)$membership)
links <- split(links$id,links$group)
if (plot == TRUE){
graph2 <- graph_from_adjacency_matrix(adj_m, mode = "undirected", diag = FALSE)
l <- as.matrix(df[,c("x","y")])
plot(graph2, vertex.size = 1, vertex.color = "black", vertex.label= NA, edge.arrow.size = .1,
axes = TRUE, layout = l, xlim = c(floor (min (l[,1] - 1)), floor (max (l[,1] + 1))), ylim = c(floor (min (l[,2] - 1)), floor (max (l[,2] + 1))), rescale = FALSE,
mark.groups = links, mark.shape = 1)
}
return (links)
}
find_neighbors<-function(df, r){
circles <- lapply (1:nrow (df), function(i) {shape.circle (c (df$x[i], df$y[i]), r = r)})
point_sets <- lapply (1:length (circles), function(i) {point.in.polygon (df$x, df$y, circles[[i]]$x, circles[[i]]$y)})
adj_m <- matrix(unlist (point_sets), ncol = nrow (df), byrow = TRUE)
adj_m
}
f<-function(x,y){sqrt(x) + x^2 + y}
box<-rpoint(100,f=f,win=win)
setwd("~/GitHub/Liberia")
library(rgdal)
library(dplyr)
library(rgeos)
library(ggmap)
library(raster)
library(spatstat)
library(maptools)
library(sp)
library(foreign)
library(knitr)
library(gridExtra)
library(rasterVis)
library(colorspace)
library(mapdata)
library(rgl)
library(scales)
library(plot3Drgl)
library(akima)
library(SpaDES)
library(rmapshaper)
library(tmap)
library(sf)
library(igraph)
source("~/Documents/R/functions.R")
win<-owin(c(0,10),c(0,10))
f<-function(x,y){sqrt(x) + x^2 + y}
box<-rpoint(100,f=f,win=win)
quartz()
plot(box)
f<-function(x,y){(sqrt(x))^5 + x^2 + y}
box<-rpoint(100,f=f,win=win)
plot(box)
f<-function(x,y){sqrt(x) + x^2 + y^(-2)}
box<-rpoint(100,f=f,win=win)
plot(box)
f<-function(x,y){sqrt(x) + x^2 + y}
box<-rpoint(100,f=f,win=win)
plot(box)
box<-rpoint(100,f=f,win=win)
plot(box)
box<-rpoint(100,f=f,win=win)
plot(box)
df<-as.data.frame(rpoint(10))
View(df)
plot(df)
df<-as.data.frame(rpoint(10))
circles <- lapply (1:nrow (df), function(i) {shape.circle (c (df$x[i], df$y[i]), r = r)})
df<-as.data.frame(rpoint(10))
system.time (circles <- lapply (1:nrow (df), function(i) {shape.circle (c (df$x[i], df$y[i]), r = r)}))
df<-as.data.frame(rpoint(100))
system.time (circles <- lapply (1:nrow (df), function(i) {shape.circle (c (df$x[i], df$y[i]), r = r)}))
df<-as.data.frame(rpoint(1000))
system.time (circles <- lapply (1:nrow (df), function(i) {shape.circle (c (df$x[i], df$y[i]), r = r)}))
df<-as.data.frame(rpoint(10000))
system.time (circles <- lapply (1:nrow (df), function(i) {shape.circle (c (df$x[i], df$y[i]), r = r)}))
col1 <- runif (12^5, 0, 2)
col2 <- rnorm (12^5, 0, 2)
col3 <- rpois (12^5, 3)
col4 <- rchisq (12^5, 2)
df <- data.frame (col1, col2, col3, col4)
system.time({
for (i in 1:nrow(df)) { # for every row
if ((df[i, 'col1'] + df[i, 'col2'] + df[i, 'col3'] + df[i, 'col4']) > 4) { # check if > 4
df[i, 5] <- "greater_than_4" # assign 5th column
} else {
df[i, 5] <- "lesser_than_4" # assign 5th column
}
}
})
output <- character (nrow(df)) # initialize output vector
system.time({
for (i in 1:nrow(df)) {
if ((df[i, 'col1'] + df[i, 'col2'] + df[i, 'col3'] + df[i, 'col4']) > 4) {
output[i] <- "greater_than_4"
} else {
output[i] <- "lesser_than_4"
}
}
df$output})
output <- character (nrow(df))
condition <- (df$col1 + df$col2 + df$col3 + df$col4) > 4  # condition check outside the loop
system.time({
for (i in 1:nrow(df)) {
if (condition[i]) {
output[i] <- "greater_than_4"
} else {
output[i] <- "lesser_than_4"
}
}
df$output <- output
})
output <- character(nrow(df))
condition <- (df$col1 + df$col2 + df$col3 + df$col4) > 4
nrow(df))[condition]
col1 <- runif (12^5, 0, 2)
col2 <- rnorm (12^5, 0, 2)
col3 <- rpois (12^5, 3)
col4 <- rchisq (12^5, 2)
df <- data.frame (col1, col2, col3, col4)
1:nrow(df))[condition]
(1:nrow(df))[condition]
output <- character(nrow(df))
condition <- (df$col1 + df$col2 + df$col3 + df$col4) > 4
system.time({
for (i in (1:nrow(df))[condition]) {  # run loop only for true conditions
if (condition[i]) {
output[i] <- "greater_than_4"
} else {
output[i] <- "lesser_than_4"
}
}
df$output })
View(df)
output <- character(nrow(df))
condition <- (df$col1 + df$col2 + df$col3 + df$col4) > 4
system.time({
for (i in (1:nrow(df))[condition]) {  # run loop only for true conditions
if (condition[i]) {
output[i] <- "greater_than_4"
} else {
output[i] <- "lesser_than_4"
}
}
df$output })
View(df)
output <- character (nrow(df))
condition <- (df$col1 + df$col2 + df$col3 + df$col4) > 4  # condition check outside the loop
system.time({
for (i in 1:nrow(df)) {
if (condition[i]) {
output[i] <- "greater_than_4"
} else {
output[i] <- "lesser_than_4"
}
}
df$output <- output
})
View(df)
output <- character(nrow(df))
condition <- (df$col1 + df$col2 + df$col3 + df$col4) > 4
system.time({
for (i in (1:nrow(df))[TRUE]) {  # run loop only for true conditions
if (condition[i]) {
output[i] <- "greater_than_4"
} else {
output[i] <- "lesser_than_4"
}
}
df$output })
View(df)
col1 <- runif (12^5, 0, 2)
col2 <- rnorm (12^5, 0, 2)
col3 <- rpois (12^5, 3)
col4 <- rchisq (12^5, 2)
df <- data.frame (col1, col2, col3, col4)
output <- character(nrow(df))
condition <- (df$col1 + df$col2 + df$col3 + df$col4) > 4
system.time({
for (i in (1:nrow(df))[condition]) {  # run loop only for true conditions
if (condition[i]) {
output[i] <- "greater_than_4"
} else {
output[i] <- "lesser_than_4"
}
}
df$output })
condition <- (df$col1 + df$col2 + df$col3 + df$col4) > 4
[condition]
condition
(i in (1:nrow(df))[condition])
i in (1:nrow(df))[condition]
(1:nrow(df))[condition]
View(edges)
df<-as.data.frame(rpoint(10000))
system.time (circles <- lapply (1:nrow (df), function(i) {shape.circle (c (df$x[i], df$y[i]), r = r)}))
system.time({
x<-df$x
y<-df$y
len<-nrow(df)
circles <- lapply (1:len, function(i) {shape.circle (c (x[i], y[i]), r = r)})})
df<-as.data.frame(rpoint(10000))
system.time (circles <- lapply (1:nrow (df), function(i) {shape.circle (c (df$x[i], df$y[i]), r = .1)}))
system.time({
x<-df$x
y<-df$y
len<-nrow(df)
circles <- lapply (1:len, function(i) {shape.circle (c (x[i], y[i]), r =.1)})})
l <- as.matrix(df[,c("x","y")])
View(l)
View(df)
df<-as.data.frame(rpoint(100000))
system.time (circles <- lapply (1:nrow (df), function(i) {shape.circle (c (df$x[i], df$y[i]), r = .1)}))
system.time({
x<-df$x
y<-df$y
len<-nrow(df)
circles <- lapply (1:len, function(i) {shape.circle (c (x[i], y[i]), r =.1)})})
shape.circle <- function(center = c(a,b),r){
tt <- seq(0,2*pi,length.out = 50)
xx <- center[1] + r * cos(tt)
yy <- center[2] + r * sin(tt)
shp<-data.frame(x = xx, y = yy)
}
df<-as.data.frame(rpoint(100000))
system.time (circles <- lapply (1:nrow (df), function(i) {shape.circle (c (df$x[i], df$y[i]), r = .1)}))
shape.circle <- function(center = c(a,b),r){
tt <- seq(0,2*pi,length.out = 50)
xx <- center[1] + r * cos(tt)
yy <- center[2] + r * sin(tt)
shp<-data.frame(x = xx, y = yy)
}
shape.circle <- function(center = c(a,b),r){
tt <- seq(0,2*pi,length.out = 50)
xx <- center[1] + r * cos(tt)
yy <- center[2] + r * sin(tt)
shp<-cbind(xx, yy)
}
df<-as.data.frame(rpoint(10))
system.time({
x<-df$x
y<-df$y
len<-nrow(df)
circles <- lapply (1:len, function(i) {shape.circle (c (x[i], y[i]), r =.1)})})
system.time({
x<-df$x
y<-df$y
len<-nrow(df)
circles <- sapply (1:len, function(i) {shape.circle (c (x[i], y[i]), r =.1)})})
View(circles)
system.time({
x<-df$x
y<-df$y
len<-nrow(df)
circles <- lapply (1:len, function(i) {shape.circle (c (x[i], y[i]), r =.1)})})
x<-matrix(rep(1,10))
y<-matrix(rep(2,10))
z<-c(x,y)
z<-list(x,y)
x<-matrix(c(rep(1,10),2))
x<-matrix(c(rep(1,10),rep(2,10)))
x<-matrix(c(rep(1,10),rep(2,10)),ncol=2)
View(x)
z<-list(x,y)
shape.circle <- function(center = c(a,b),r){
tt <- seq(0,2*pi,length.out = 50)
xx <- center[1] + r * cos(tt)
yy <- center[2] + r * sin(tt)
shp<-data.frame (x = xx,y = yy)
}
system.time({
x<-df$x
y<-df$y
len<-nrow(df)
circles <- lapply (1:len, function(i) {shape.circle (c (x[i], y[i]), r =.1)})})
df<-as.data.frame(rpoint(100000000))
system.time({
x<-df$x
y<-df$y
len<-nrow(df)
circles <- lapply (1:len, function(i) {shape.circle (c (x[i], y[i]), r =.1)})})
df<-as.data.frame(rpoint(100))
df<-as.data.frame(rpoint(100))
system.time (circles <- lapply (1:nrow (df), function(i) {shape.circle (c (df$x[i], df$y[i]), r = .1)}))
system.time({
x<-df$x
y<-df$y
len<-nrow(df)
circles <- lapply (1:len, function(i) {shape.circle (c (x[i], y[i]), r =.1)})})
system.time({
x<-df$x
y<-df$y
len<-nrow(df)
circles<-vector("list", 100)
for (i in 1:len){
cirlces[[i]]<-shape.circle (c (x[i], y[i]), r =.1)
}
})
system.time({
x<-df$x
y<-df$y
len<-nrow(df)
circles<-vector("list", 100)
for (i in 1:len){
circles[[i]]<-shape.circle (c (x[i], y[i]), r =.1)
}
})
df<-as.matrix(rpoint(100))
df<-as.matrix(as.data.frame(rpoint(100)))
df<-as.data.frame(rpoint(100))
x<-df$x
y<-df$y
len<-nrow(df)
system.time({
circles <- lapply (1:len, function(i) {shape.circle (c (x[i], y[i]), r =.1)})})
df<-as.data.frame(rpoint(1000))
x<-df$x
y<-df$y
len<-nrow(df)
system.time({
circles <- lapply (1:len, function(i) {shape.circle (c (x[i], y[i]), r =.1)})})
df<-as.data.frame(rpoint(10000))
x<-df$x
y<-df$y
len<-nrow(df)
system.time({
circles <- lapply (1:len, function(i) {shape.circle (c (x[i], y[i]), r =.1)})})
find_neighbors<-function(df, r){
x<-df$x
y<-df$y
len<-nrow(df)
circles <- lapply (1:len, function(i) {shape.circle (c (x[i], y[i]), r = r)})
point_sets <- lapply (1:len, function(i) {point.in.polygon (x, y, circles[[i]]$x, circles[[i]]$y, mode.checked = TRUE)})
adj_m <- matrix(unlist (point_sets), ncol = len, byrow = TRUE)
#diag(adj_m) <- 0
adj_m
}
x<-find_neighbors(df,.1)
find_neighbors<-function(df, r){
x<-df$x
y<-df$y
len<-nrow(df)
system.time(circles <- lapply (1:len, function(i) {shape.circle (c (x[i], y[i]), r = r)}))
system.time(point_sets <- lapply (1:len, function(i) {point.in.polygon (x, y, circles[[i]]$x, circles[[i]]$y, mode.checked = TRUE)}))
system.time(adj_m <- matrix(unlist (point_sets), ncol = len, byrow = TRUE))
#diag(adj_m) <- 0
adj_m
}
x<-find_neighbors(df,.1)
df<-as.data.frame(rpoint(100))
df<-as.data.frame(rpoint(100))
x<-df$x
y<-df$y
len<-nrow(df)
system.time(circles <- lapply (1:len, function(i) {shape.circle (c (x[i], y[i]), r =.1)}))
system.time(point_sets <- lapply (1:len, function(i) {point.in.polygon (x, y, circles[[i]]$x, circles[[i]]$y, mode.checked = TRUE)}))
system.time(adj_m <- matrix(unlist (point_sets), ncol = len, byrow = TRUE))
system.time(circles <- lapply (1:len, function(i) {shape.circle (c (x[i], y[i]), r =.1)}))
x<-df$x
y<-df$y
len<-nrow(df)
system.time(circles <- lapply (1:len, function(i) {shape.circle (c (x[i], y[i]), r =.1)}))
df<-as.data.frame(rpoint(1000))
x<-df$x
y<-df$y
len<-nrow(df)
system.time(circles <- lapply (1:len, function(i) {shape.circle (c (x[i], y[i]), r =.1)}))
system.time(point_sets <- lapply (1:len, function(i) {point.in.polygon (x, y, circles[[i]]$x, circles[[i]]$y, mode.checked = TRUE)}))
system.time(adj_m <- matrix(unlist (point_sets), ncol = len, byrow = TRUE))
df<-as.data.frame(rpoint(10000))
x<-df$x
y<-df$y
len<-nrow(df)
system.time(circles <- lapply (1:len, function(i) {shape.circle (c (x[i], y[i]), r =.1)}))
system.time(point_sets <- lapply (1:len, function(i) {point.in.polygon (x, y, circles[[i]]$x, circles[[i]]$y, mode.checked = TRUE)}))
adj_m <- matrix(unlist (point_sets), ncol = len, byrow = TRUE)
system.time(adj_m <- matrix(unlist (point_sets), ncol = len, byrow = TRUE))
point.in.polygon
R_point_in_polygon_sp
.Call(R_point_in_polygon_sp, point.x, point.y,
pol.x, pol.y)
.Call(R_point_in_polygon_sp)
shape.circle <- function(center = c(a,b),r){
tt <- seq(0,2*pi,length.out = 100)
xx <- center[1] + r * cos(tt)
yy <- center[2] + r * sin(tt)
shp<-data.frame (x = xx,y = yy)
}
rm(!ls(box_m))
gc()
rm(box_df,box_df2,box_df3,box_m, circ, circ2500, current_point,delvals,df2,df3,l,M)
View(wp_df1)
View(test)
rm(adj_m,pointset,pt,pts,shell_df,test,test2)
View(wp_df1)
View(bain_gclust2)
rm(bain_df,bain_gclust2,edges, df,point_set,wp_df1,wp_df2)
rm(ahull_shell,alpha,alphahull,bain_gclust,bain_utm_dens,bain_utm_ppp,bain_utm_ppp2)
rm(box,box_sp,circles,col1,col2,col3,col4,condition,Dcl,Dim,Dsg,gas,gr.test,graph,graph2,group,group2,i,id,ids,in_circ)
rm(list=ls())
load("shapefiles/WAF_shp/WAF_adm0.RData")
plot(waf)
rm(list=ls())
bain_plus<-readOGR(dsn = "shapefiles",layer="bain_surroundings",stringsAsFactors = FALSE,verbose=FALSE)
bain_plus_utm<-readOGR(dsn = "shapefiles",layer="bain_surroundings",stringsAsFactors = FALSE,verbose=FALSE)
prj_lbr <- "+proj=utm +zone=29 +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0"
bain_plus_utm<-spTransform(bain_plus, CRS = prj_lbr)
