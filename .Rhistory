Dim <- as.image.SpatialGridDataFrame(Dsg)  # convert again to an image
Dcl <- contourLines(Dim, nlevels = 4)  # create contour object - change 8 for more/fewer levels
SLDF <- ContourLines2SLDF(Dcl) # convert to SpatialLinesDataFrame
plot(SLDF, col = terrain.colors(8))
xxx <- SLDF[-c(1,3,4), ]
Polyclust <- gPolygonize(xxx)
plot(Polyclust)
gas <- gArea(Polyclust, byid = T)
Dens <- density(p, adjust = 0.2)  # create density object
class(Dens)
plot(Dens)
con <- contour(density(p, adjust = 0.2), nlevels=4)  # plot as contours - this is where we're heading
Dsg <- as(Dens, "SpatialGridDataFrame")  # convert to spatial grid class
Dim <- as.image.SpatialGridDataFrame(Dsg)  # convert again to an image
Dcl <- contourLines(Dim, nlevels = 4)  # create contour object - change 8 for more/fewer levels
SLDF <- ContourLines2SLDF(Dcl) # convert to SpatialLinesDataFrame
plot(SLDF, col = terrain.colors(8))
xxx <- SLDF[-c(1,3,4), ]
Polyclust <- gPolygonize(xxx)
plot(Polyclust)
gas <- gArea(Polyclust, byid = T)
Dens <- density(test3,weights=test3$marks)  # create density object
class(Dens)
plot(Dens)
con <- contour(density(test3, adjust = 0.2), nlevels=4)  # plot as contours - this is where we're heading
Dsg <- as(Dens, "SpatialGridDataFrame")  # convert to spatial grid class
Dim <- as.image.SpatialGridDataFrame(Dsg)  # convert again to an image
Dcl <- contourLines(Dim, nlevels = 4)  # create contour object - change 8 for more/fewer levels
SLDF <- ContourLines2SLDF(Dcl) # convert to SpatialLinesDataFrame
plot(SLDF, col = terrain.colors(8))
xxx <- SLDF[-c(1,3,4), ]
Polyclust <- gPolygonize(xxx)
gas <- gArea(Polyclust, byid = T)
Dens <- density(p, adjust = 0.2)  # create density object
class(Dens)
plot(Dens)
con <- contour(density(p, adjust = 0.2), nlevels=4)  # plot as contours - this is where we're heading
Dsg <- as(Dens, "SpatialGridDataFrame")  # convert to spatial grid class
Dim <- as.image.SpatialGridDataFrame(Dsg)  # convert again to an image
Dcl <- contourLines(Dim, nlevels = 4)  # create contour object - change 8 for more/fewer levels
SLDF <- ContourLines2SLDF(Dcl) # convert to SpatialLinesDataFrame
plot(SLDF, col = terrain.colors(8))
as(SpatialPoints(SLDF), "ppp")
xxx <- SLDF[-c(1,3,4), ]
Dens <- density(test3,weights=test3$marks)  # create density object
class(Dens)
plot(Dens)
con <- contour(density(test3, adjust = 0.2), nlevels=4)  # plot as contours - this is where we're heading
Dsg <- as(Dens, "SpatialGridDataFrame")  # convert to spatial grid class
Dim <- as.image.SpatialGridDataFrame(Dsg)  # convert again to an image
Dcl <- contourLines(Dim, nlevels = 4)  # create contour object - change 8 for more/fewer levels
SLDF <- ContourLines2SLDF(Dcl) # convert to SpatialLinesDataFrame
plot(SLDF, col = terrain.colors(8))
xxx <- SLDF[-c(1,3,4), ]
Polyclust <- gPolygonize(xxx)
gas <- gArea(Polyclust, byid = F)
q1 = readWKT("POLYGON((0 0,3 0,3 3,0 3,0 0))")
q2 = readWKT("POLYGON((0 0,3 0,3 3,0 3,0 0),(1 1,2 1,2 2,1 2,1 1))")
gArea(q1)
q1@polygons[[1]]@area
gArea(q2)
q2@polygons[[1]]@area
q2 = readWKT("POLYGON((0 0,3 0,3 3,0 3,0 0),(1 1,2 1,2 2,1 2,1 1))")
gArea(q2)
q2@polygons[[1]]@area
Dens <- density(p, adjust = 0.2)  # create density object
class(Dens)
plot(Dens)
con <- contour(density(p, adjust = 0.2), nlevels=4)  # plot as contours - this is where we're heading
Dsg <- as(Dens, "SpatialGridDataFrame")  # convert to spatial grid class
Dim <- as.image.SpatialGridDataFrame(Dsg)  # convert again to an image
Dcl <- contourLines(Dim, nlevels = 4)  # create contour object - change 8 for more/fewer levels
SLDF <- ContourLines2SLDF(Dcl) # convert to SpatialLinesDataFrame
plot(SLDF, col = terrain.colors(8))
as(SpatialPoints(SLDF), "ppp")
xxx <- SLDF[-c(1,3,4), ]
Polyclust <- gPolygonize(xxx)
Dens <- density(test3,weights=test3$marks)  # create density object
class(Dens)
plot(Dens)
con <- contour(density(test3, adjust = 0.2), nlevels=4)  # plot as contours - this is where we're heading
Dsg <- as(Dens, "SpatialGridDataFrame")  # convert to spatial grid class
Dim <- as.image.SpatialGridDataFrame(Dsg)  # convert again to an image
Dcl <- contourLines(Dim, nlevels = 4)  # create contour object - change 8 for more/fewer levels
SLDF <- ContourLines2SLDF(Dcl) # convert to SpatialLinesDataFrame
plot(SLDF, col = terrain.colors(8))
xxx <- SLDF[-c(1,3,4), ]
Polyclust <- gPolygonize(xxx)
Polyclust <- gPolygonize(xxx@lines)
Dens <- density(p, adjust = 0.2)  # create density object
class(Dens)
plot(Dens)
con <- contour(density(p, adjust = 0.2), nlevels=4)  # plot as contours - this is where we're heading
Dsg <- as(Dens, "SpatialGridDataFrame")  # convert to spatial grid class
Dim <- as.image.SpatialGridDataFrame(Dsg)  # convert again to an image
Dcl <- contourLines(Dim, nlevels = 4)  # create contour object - change 8 for more/fewer levels
SLDF <- ContourLines2SLDF(Dcl) # convert to SpatialLinesDataFrame
plot(SLDF, col = terrain.colors(8))
as(SpatialPoints(SLDF), "ppp")
xxx <- SLDF[-c(1,3,4), ]
Polyclust <- gPolygonize(xxx)
Dens <- density(test3,weights=test3$marks)  # create density object
class(Dens)
plot(Dens)
con <- contour(density(test3, adjust = 0.2), nlevels=4)  # plot as contours - this is where we're heading
Dsg <- as(Dens, "SpatialGridDataFrame")  # convert to spatial grid class
Dim <- as.image.SpatialGridDataFrame(Dsg)  # convert again to an image
Dcl <- contourLines(Dim, nlevels = 4)  # create contour object - change 8 for more/fewer levels
SLDF <- ContourLines2SLDF(Dcl) # convert to SpatialLinesDataFrame
plot(SLDF, col = terrain.colors(8))
xxx <- SLDF[-c(1,3,4), ]
class(xxx@lines)
class(xxx@lines[[1]])
class(xxx)
Dens <- density(p, adjust = 0.2)  # create density object
class(Dens)
plot(Dens)
con <- contour(density(p, adjust = 0.2), nlevels=4)  # plot as contours - this is where we're heading
Dsg <- as(Dens, "SpatialGridDataFrame")  # convert to spatial grid class
Dim <- as.image.SpatialGridDataFrame(Dsg)  # convert again to an image
Dcl <- contourLines(Dim, nlevels = 4)  # create contour object - change 8 for more/fewer levels
SLDF <- ContourLines2SLDF(Dcl) # convert to SpatialLinesDataFrame
plot(SLDF, col = terrain.colors(8))
as(SpatialPoints(SLDF), "ppp")
xxx <- SLDF[-c(1,3,4), ]
class(xxx@lines[[1]])
class(xxx)
Dens <- density(test3,weights=test3$marks)  # create density object
class(Dens)
plot(Dens)
con <- contour(density(test3, adjust = 0.2), nlevels=4)  # plot as contours - this is where we're heading
Dsg <- as(Dens, "SpatialGridDataFrame")  # convert to spatial grid class
Dim <- as.image.SpatialGridDataFrame(Dsg)  # convert again to an image
Dcl <- contourLines(Dim, nlevels = 4)  # create contour object - change 8 for more/fewer levels
SLDF <- ContourLines2SLDF(Dcl) # convert to SpatialLinesDataFrame
plot(SLDF, col = terrain.colors(8))
xxx <- SLDF[-c(1,3,4), ]
class(xxx@lines[[1]])
class(xxx)
Dens <- density(p, adjust = 0.2)  # create density object
class(Dens)
plot(Dens)
con <- contour(density(p, adjust = 0.2), nlevels=4)  # plot as contours - this is where we're heading
Dsg <- as(Dens, "SpatialGridDataFrame")  # convert to spatial grid class
Dim <- as.image.SpatialGridDataFrame(Dsg)  # convert again to an image
Dcl <- contourLines(Dim, nlevels = 4)  # create contour object - change 8 for more/fewer levels
SLDF <- ContourLines2SLDF(Dcl) # convert to SpatialLinesDataFrame
plot(SLDF, col = terrain.colors(8))
as(SpatialPoints(SLDF), "ppp")
xxx <- SLDF[-c(1,3,4), ]
class(xxx@lines[[1]])
class(xxx)
Polyclust <- gPolygonize(xxx)
plot(Polyclust)
gas <- gArea(Polyclust, byid = T)
Polyclust <- SpatialPolygonsDataFrame(Polyclust, data = data.frame(gas), match.ID = F)
plot(Polyclust)
pxy <- cbind(p$x,p$y)
pxy <- as.data.frame(pxy)
pxy$observation <- 1:nrow(pxy)
pxy$observation <- as.data.frame(pxy$observation)
dfxy <- as.data.frame(cbind(pxy$V1,pxy$V2))
chocho <- SpatialPointsDataFrame(dfxy,pxy$observation)
cAg <- aggregate(chocho, by = Polyclust, FUN = length)
plot.new()
plot(Dens, main = "")
plot(SLDF, col = terrain.colors(8), add = T)
plot(cAg, col = "red", border = "white", add = T)
x<-mask(test2,Polyclust)
y<-mask(rp,Polyclust)
z<-mask(rp2,Polyclust)
sum(x)
sum(x@data@values)
sum(x@data@values,na.rm=T)
sum(y@data@values,na.rm=T)
sum(z@data@values,na.rm=T)
sum(test2)
sum(test2,na.rm=T)
sum(test2@data@values,na.rm=T)
test2_im <- as.im(test2)
p <- rpoint(8416, f=test2_im)
plot(test2_im)
plot(p, main = "Pixel Image with Function based on Density of Raster Map")
rp<-raster(as.im(p))
open3d()
plot3D(rp, col = blueblue)
quartz()
p2 <- rpoint(8416, f=test2_im)
plot(p2, main = "Pixel Image with Function based on Density of Raster Map")
rp2<-raster(as.im(p2))
open3d()
plot3D(rp2, col = blueblue)
open3d()
plot3D(test2, col = blueblue)
open3d()
plot3D(test3, col = blueblue)
Dens <- density(p, adjust = 0.2)  # create density object
class(Dens)
plot(Dens)
con <- contour(density(p, adjust = 0.2), nlevels=4)  # plot as contours - this is where we're heading
Dsg <- as(Dens, "SpatialGridDataFrame")  # convert to spatial grid class
Dim <- as.image.SpatialGridDataFrame(Dsg)  # convert again to an image
Dcl <- contourLines(Dim, nlevels = 4)  # create contour object - change 8 for more/fewer levels
SLDF <- ContourLines2SLDF(Dcl) # convert to SpatialLinesDataFrame
plot(SLDF, col = terrain.colors(8))
as(SpatialPoints(SLDF), "ppp")
xxx <- SLDF[-c(1,3,4), ]
class(xxx@lines[[1]])
class(xxx)
Polyclust <- gPolygonize(xxx)
x<-mask(test2,Polyclust)
sum(x@data@values,na.rm=T)
y<-mask(rp,Polyclust)
sum(y@data@values,na.rm=T)
z<-mask(rp2,Polyclust)
sum(z@data@values,na.rm=T)
df<-data.frame(cell=cellsFromExtent(test2,c(-9,-8.6,5.6,6)), pop=getValues(test2))
test2<-crop(test,c(-9,-8.6,5.6,6))
plot(test2)
as.owin(extent(lbr))
as.owin(lbr)
as.owin(c(-9,-8.6,5.6,6))
rm(list=ls())
setwd("~/GitHub/Liberia")
lbr<-readOGR(dsn="shapefiles/LBR_shp", layer="LBR_adm0",stringsAsFactors=FALSE, verbose=FALSE)
library(rgdal)
library(dplyr)
library(rgeos)
library(ggmap)
library(raster)
library(spatstat)
library(maptools)
library(sp)
library(foreign)
library(knitr)
library(gridExtra)
library(rasterVis)
library(colorspace)
library(mapdata)
library(rgl)
library(scales)
library(plot3Drgl)
library(akima)
library(SpaDES)
library(rmapshaper)
lbr<-readOGR(dsn="shapefiles/LBR_shp", layer="LBR_adm0",stringsAsFactors=FALSE, verbose=FALSE)
lbr_clan<-readOGR(dsn="shapefiles/tyler_LBR",layer="clans", stringsAsFactors = FALSE,verbose = FALSE)
lbr_clan<-spTransform(lbr_clan, CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
gpw4_2010<-raster("~/GoogleDrive/LiberiaProject/gpw-v4-population-count_2010.tif")
gpw4_2010<-crop(gpw4_2010,extent(lbr))
gpw4_2010<-mask(gpw4_2010,lbr)
pop<-sum(gpw4_2010@data@values,na.rm = T)
gpw4_2010_im <- as.im(gpw4_2010)
win<- as(lbr,"owin")
p <- rpoint(pop/100, f=gpw4_2010_im,win)
pop<-sum(gpw4_2010@data@values,na.rm = T)
plot(gpw4_2010_im)
quartz()
plot(gpw4_2010_im)
plot(p, main = "Pixel Image with Function based on Density of Raster Map",cex=.03)
rp<-raster(as.im(p))
open3d()
plot3D(rp, col = blueblue)
blueblue<-colorRampPalette(brewer.pal(9,"Blues"))(250)
plot3D(rp, col = blueblue)
Dens <- density(p, sigma=bw.ppl)  # create density object
class(Dens)
plot(Dens)
con <- contour(Dens, nlevels=8)  # plot as contours - this is where we're heading
con <- contour(Dens, nlevels=20)  # plot as contours - this is where we're heading
con <- contour(Dens, nlevels=40)  # plot as contours - this is where we're heading
con <- contour(Dens, nlevels=100)  # plot as contours - this is where we're heading
con2<-contour(gpw4_2010_im,nlevels=20)
con2<-contour(gpw4_2010_im,nlevels=100)
con <- contour(Dens, nlevels=100) # plot as contours - this is where we're heading
con2<-contour(gpw4_2010_im,nlevels=100)
Dsg <- as(Dens, "SpatialGridDataFrame")  # convert to spatial grid class
Dsg2<-as(gpw4_2010_im,"SpatialGridDataFrame")
con <- contour(Dens, nlevels=100) # plot as contours - this is where we're heading
Dsg <- as(Dens, "SpatialGridDataFrame")  # convert to spatial grid class
Dim <- as.image.SpatialGridDataFrame(Dsg)  # convert again to an image
Dcl <- contourLines(Dim, nlevels = 100)  # create contour object - change 8 for more/fewer levels
SLDF <- ContourLines2SLDF(Dcl) # convert to SpatialLinesDataFrame
plot(SLDF, col = terrain.colors(100))
as(SpatialPoints(SLDF), "ppp")
xxx <- SLDF[-c(1,3,4), ]
class(xxx@lines[[1]])
class(xxx)
Polyclust <- gPolygonize(xxx)
plot(Polyclust)
gas <- gArea(Polyclust, byid = T)
Polyclust <- SpatialPolygonsDataFrame(Polyclust, data = data.frame(gas), match.ID = F)
plot(Polyclust)
# Workaround
pxy <- cbind(p$x,p$y)
pxy <- as.data.frame(pxy)
pxy$observation <- 1:nrow(pxy)
pxy$observation <- as.data.frame(pxy$observation)
dfxy <- as.data.frame(cbind(pxy$V1,pxy$V2))
chocho <- SpatialPointsDataFrame(dfxy,pxy$observation)
cAg <- aggregate(chocho, by = Polyclust, FUN = length)
con2<-contour(gpw4_2010_im,nlevels=100)
Dsg2<-as(gpw4_2010_im,"SpatialGridDataFrame")
Dim2 <- as.image.SpatialGridDataFrame(Dsg2)  # convert again to an image
Dcl2 <- contourLines(Dim2, nlevels = 100)  # create contour object - change 8 for more/fewer levels
SLDF2 <- ContourLines2SLDF(Dcl2) # convert to SpatialLinesDataFrame
plot(SLDF2, col = terrain.colors(100))
as(SpatialPoints(SLDF2), "ppp")
xxx2 <- SLDF2[-c(1,3,4), ]
class(xxx2@lines[[1]])
class(xxx2)
Polyclust2 <- gPolygonize(xxx2)
plot(Polyclust2)
gas2 <- gArea(Polyclust2, byid = T)
Polyclust2 <- SpatialPolygonsDataFrame(Polyclust2, data = data.frame(gas2), match.ID = F)
plot(Polyclust2)
# Workaround
p2xy <- cbind(p2$x,p2$y)
p2xy <- as.data.frame(p2xy)
p2xy$observation <- 1:nrow(p2xy)
p2xy$observation <- as.data.frame(p2xy$observation)
df2xy <- as.data.frame(cbind(p2xy$V1,p2xy$V2))
chocho2 <- SpatialPointsDataFrame(df2xy,p2xy$observation)
cAg2 <- aggregate(chocho2, by = Polyclust2, FUN = length)
plot(Polyclust2)
plot(Polyclust)
plot(Polyclust)
plot(Polyclust)
plot(Dens)
plot(Polyclust)
plot.new()
plot(Dens, main = "")
plot(SLDF, col = terrain.colors(8), add = T)
plot(cAg, col = "red", border = "white", add = T)
quartz()
plot(gpw4_2010_im, main = "")
plot(SLDF2, col = terrain.colors(8), add = T)
plot(Polyclust)
plot(Dens, main = "")
plot(SLDF, col = terrain.colors(8), add = T)
plot(Polyclust,add=T)
plot(SLDF, col = terrain.colors(8), add = T)
plot.new()
plot(Dens, main = "")
plot(SLDF, col = terrain.colors(8), add = T)
plot(Polyclust,add=T)
plot(SLDF, col = terrain.colors(8), add = T)
Dsg2<-as(gpw4_2010_im,"SpatialGridDataFrame")
Dim2 <- as.image.SpatialGridDataFrame(Dsg2)  # convert again to an image
Dcl2 <- contourLines(Dim2, nlevels = 200)  # create contour object - change 8 for more/fewer levels
SLDF2 <- ContourLines2SLDF(Dcl2) # convert to SpatialLinesDataFrame
plot(SLDF2, col = terrain.colors(100))
as(SpatialPoints(SLDF2), "ppp")
xxx2 <- SLDF2[-c(1,3,4), ]
class(xxx2@lines[[1]])
class(xxx2)
Polyclust2 <- gPolygonize(xxx2)
plot(Polyclust2)
gas2 <- gArea(Polyclust2, byid = T)
Polyclust2 <- SpatialPolygonsDataFrame(Polyclust2, data = data.frame(gas2), match.ID = F)
plot(Polyclust2)
Dsg2<-as(gpw4_2010_im,"SpatialGridDataFrame")
Dim2 <- as.image.SpatialGridDataFrame(Dsg2)  # convert again to an image
Dcl2 <- contourLines(Dim2, nlevels = 200)  # create contour object - change 8 for more/fewer levels
SLDF2 <- ContourLines2SLDF(Dcl2) # convert to SpatialLinesDataFrame
as(SpatialPoints(SLDF2), "ppp")
xxx2 <- SLDF2[-c(1,3,4), ]
class(xxx2@lines[[1]])
class(xxx2)
Polyclust2 <- gPolygonize(xxx2)
gas2 <- gArea(Polyclust2, byid = T)
Polyclust2 <- SpatialPolygonsDataFrame(Polyclust2, data = data.frame(gas2), match.ID = F)
plot.new()
plot(Dens, main = "")
plot(SLDF, col = terrain.colors(8), add = T)
quartz()
plot(gpw4_2010_im, main = "")
plot(SLDF2, col = terrain.colors(8), add = T)
plot(Dens, main = "")
plot(gpw4_2010_im, main = "")
plot(log(gpw4_2010_im), main = "")
plot(SLDF2, col = terrain.colors(8), add = T)
point<-data.frame(long=-9.471618,lat=7.001112)
points(point)
plot(log(gpw4_2010_im), main = "")
plot(SLDF2, col = terrain.colors(8), add = T)
points(point)
plot(log(gpw4_2010_im), main = "")
plot(SLDF2, col = terrain.colors(8), add = T)
4*runif(1)
4*runif(1)
4*runif(1)
4*runif(1)
4*runif(1)
4*runif(1)
4*runif(1)
4*runif(1)
4*runif(1)
4*runif(1)
4*runif(1)
10*runif(1)
10*runif(1)
10*runif(1)
10*runif(1)
10*runif(1)
10*runif(1)
10*runif(1)
10*runif(1)
10*runif(1)
10*runif(1)
10*runif(1)
10*runif(1)
10*runif(1)
quartz()
plot.new()
par(mfrow=c(1,3))
rand_num<-sample(1:100,36,replace=T)
win_list<-list()
for (i  in 0:5 ) {
for (j in 0:5){
win<-owin(xrange=c(i,i+1),yrange=c(j,j+1))
win_list<-c(win_list,list(win))
}
}
ppp_list<-lapply(1:36,function(i) rpoint(rand_num[[i]],win=win_list[[i]]))
ppp_list<-as.solist(ppp_list)
ppp_total<-superimpose(ppp_list,W=tess(tiles=win_list))
x<-pixellate(ppp_total,eps=1)
plot(x)
dens1<-density(ppp_total,eps=.01)
summary(dens1)
dens1[ppp_total]
plot(dens1)
plot(quadratcount(ppp_total,nx=6,ny=6))
intens<-intensity(quadratcount(ppp_total,nx=6,ny=6),image=T)
plot(intens)
plot(quadratcount(ppp_total,nx=6,ny=6))
plot(x)
dens1<-density(ppp_total,eps=.01)
summary(dens1)
dens1[ppp_total]
plot(dens1)
plot.new()
par(mfrow=c(1,3))
plot(x)
plot(dens1)
plot(intens)
plot(quadratcount(ppp_total,nx=6,ny=6))
intensity(ppp_total_)
intensity(ppp_total)
ppp_total
summary(ppp_total)
quant<-quantile(getValues(wp_lbr))
wp_lbr<-raster("~/Documents/wm/year1/monroe_project/LBR-POP/LBR10adjv3.tif")
quant<-quantile(getValues(wp_lbr))
quant<-quantile(getValues(wp_lbr),na.rm=T)
quant
quant<-quantile(getValues(wp_lbr),probs = seq(0, 1, .0625),na.rm=T)
quant
quant<-quantile(getValues(wp_lbr),probs = seq(0, 1, .015625),na.rm=T)
quant
rm(list=ls())
setwd("~/GitHub/Liberia")
load("shapefiles/WAF_shp/WAF_adm0.RData")
gpw4_2010<-raster("~/GoogleDrive/LiberiaProject/gpw-v4-population-count_2010.tif")
gpw4_2010<-mask(crop(gpw4_2010,waf),waf)
gpw4_2010<-crop(gpw4_2010,waf)
pop<-sum(gpw4_2010@data@values,na.rm = T)
gpw4_2010@data@values
pop<-sum(gpw4_2010@data@values,na.rm = T)
plot(gpw4_2010)
quartz()
plot(gpw4_2010)
gpw4_2010<-mask(gpw4_2010,waf)
plot(gpw4_2010)
pop<-sum(gpw4_2010@data@values,na.rm = T)
gpw4_2010_im<-as.im(gpw4_2010)
plot(gpw4_2010_im)
win<-as(waf,"owin")
p <- rpoint(pop/1000, f=gpw4_2010_im,win)
plot(p, main = "Pixel Image with Function based on Density of Raster Map",cex=.03)
p_im<-as.im(p)
sig<-bw.diggle(p)
scott<-bw.scott(p)
Dens <- density(p, sigma=scott)  # create density object
plot(Dens)
Dens <- density(p, sigma=sig)  # create density object
plot(Dens)
Dens <- density(p, sigma=sig,adjust=2)  # create density object
plot(Dens)
Dens <- density(p, sigma=sig,adjust=10)  # create density object
plot(Dens)
Dens <- density(p, sigma=sig,adjust=25)  # create density object
plot(Dens)
Dcl <- contourLines(Dim, nlevels = 100)  # create contour object - change 8 for more/fewer levels
Dsg <- as(Dens, "SpatialGridDataFrame")  # convert to spatial grid class
Dim <- as.image.SpatialGridDataFrame(Dsg)  # convert again to an image
Dcl <- contourLines(Dim, nlevels = 100)  # create contour object - change 8 for more/fewer levels
SLDF <- ContourLines2SLDF(Dcl) # convert to SpatialLinesDataFrame
plot(SLDF, col = terrain.colors(100))
plot(Dens, main = "West Africa (Lovelace)")
plot(SLDF, col = terrain.colors(8), add = T)
lbr_clan<-readOGR(dsn="shapefiles/tyler_LBR",layer="clans", stringsAsFactors = FALSE,verbose = FALSE)
Dens <- density(p, sigma=sig)  # create density object
Dcl <- contourLines(Dens, nlevels = 100)  # create contour object - change 8 for more/fewer levels
Dim <- as.image.SpatialGridDataFrame(Dsg)  # convert again to an image
Dsg <- as(Dens, "SpatialGridDataFrame")  # convert to spatial grid class
Dim <- as.image.SpatialGridDataFrame(Dsg)  # convert again to an image
Dcl <- contourLines(Dim, nlevels = 100)  # create contour object - change 8 for more/fewer levels
SLDF <- ContourLines2SLDF(Dcl) # convert to SpatialLinesDataFrame
plot(Dens, main = "West Africa (Lovelace)")
plot(SLDF, col = terrain.colors(8), add = T)
